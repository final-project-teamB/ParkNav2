# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름 
name: Spring Boot & Gradle CI/CD 

# Event Trigger
# dev branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음 
on:
  push:
    branches: [ ci-cd-test ]
  pull_request:
    branches: [ ci-cd-test ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        
    ## create application.properties
    - name: make application.properties
      if: contains(github.ref, 'ci-cd-test') # branch가 ci-cd-tests 때
      run: |
        
        # spring의 resources 경로로 이동
        cd ./src/main/resources 
        
        # application.properties 파일 생성
        touch ./application.properties 
        
        # GitHub-Actions에서 설정한 값을 application.properties 파일에 쓰기
        echo "${{ secrets.PROPERTIES_DEV }}" >> ./application.properties 
      shell: bash
      
       ## gradle build
    - name: Build with Gradle
      run: 
        chmod +x ./gradlew
        
        ./gradlew build

      # Spring 어플리케이션 Docker Image 빌드
    - name: Docker build & push to ci-cd-test
      if: contains(github.ref, 'ci-cd-test')
      run: |          
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --build-arg DEPENDENCY=build/dependency -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
      
      
      # 서버에서 Docker 이미지 실행
    - name: EC2 Docker Run
      uses: appleboy/ssh-action@master
      if: contains(github.ref, 'ci-cd-test')
      with:
        host: ${{ secrets.HOST_DEV }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.KEY }}
        port: 22
        script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/hanghaebnb
            docker-compose up -d
            docker image prune -f
      
      
      
