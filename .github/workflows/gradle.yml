# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름 
name: Spring Boot & Gradle CI/CD 

# Event Trigger 
# dev branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음 
on:
  push:
    branches: [ CI-CD-Test ]
  pull_request:
    branches: [ CI-CD-Test ] 

jobs:
  build:
  
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    # 브랜치를와 마찬가지로 checkout을 한다.
    # 누군가 만들어 놓은 Actions를 사용하기 위해 uses 키워드 사용
    steps:
    - uses: actions/checkout@v3
        
    # push 할때마다 다시 gradle을 install하지 않기 위한 설정
    # 해당 프로젝트의 gradle값이 변경됐을 경우에만 install
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # CI 시작
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      
      # with로 Actions에 값 전달
      with:
        java-version: 17
        distribution: 'temurin'

    ## create application.properties
    - name: make application.properties
      if: contains(github.ref, 'CI-CD-Test') # branch가 develop 때
      run: |
        
        # spring의 resources 경로로 이동
        cd ./src/main/resources 
        
        # application.properties 파일 생성
        touch ./application.yml
        
        touch ./application-common.yml 
        
        touch ./application-db.yml 
        
        # GitHub-Actions에서 설정한 값을 application.properties 파일에 쓰기
        echo "${{ secrets.YML_DEV }}" >> ./application.yml 
        
        echo "${{ secrets.COMMON_DEV }}" >> ./application-common.yml 
        
        echo "${{ secrets.DB_DEV }}" >> ./application-db.yml 
      shell: bash
      
       ## gradle build
    - name: Build with Gradle
      run: 
        chmod +x ./gradlew
        
        ./gradlew build

      # Spring 어플리케이션 Docker Image 빌드
      # CD 시작 
    - name: Docker build
      if: contains(github.ref, 'CI-CD-Test')
      run: |          
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --build-arg DEPENDENCY=build/dependency -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
     
      
      # 서버에서 Docker 이미지 실행
      # HOST_DEV = 퍼블릭 IPv4 DNS , USERNAME = ubuntu, KEY = pem 키 전체
    - name: EC2 Docker Run
      uses: appleboy/ssh-action@master
      if: contains(github.ref, 'CI-CD-Test')
      with:
        host: ${{ secrets.HOST_DEV }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.KEY }}
        port: 22
        script: |
          sudo usermod -aG docker $USER
          exec su -l $USER
          sudo docker stop $(docker ps -a -q) 
          sudo docker rm $(docker ps -a -q)
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
          sudo docker run -d -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
      
      
      
