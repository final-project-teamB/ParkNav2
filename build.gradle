plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.json', name: 'json', version: '20220924'
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    //텍스트 유사도 검증
    implementation 'org.apache.commons:commons-text:1.9'
    //redis 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.16.3'
    //QueryDsl
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-apt'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

}


tasks.named('test') {
    useJUnitPlatform()
}

//Annotation Processor가 생성한 Q객체를 저장할 디렉토리 경로를 설정합니다.
def generated='src/main/generated'
//Java 소스 파일의 위치를 지정합니다.
sourceSets {
    //Java 소스 파일의 위치에 Annotation Processor가 생성한 Q객체를 저장하는 디렉토리를 추가합니다.
    main.java.srcDirs += [ generated ]
}
//Java 소스 코드 컴파일 태스크에 대한 설정을 지정합니다.
tasks.withType(JavaCompile) {
    //options.annotationProcessorGeneratedSourcesDirectory 옵션에 Annotation Processor가 생성한 Q객체를 저장하는 디렉토리를 지정합니다.
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    //Annotation Processor가 생성한 Q객체를 저장하는 디렉토리를 삭제합니다.
    file(generated).deleteDir()
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in "*.QA".."*.QZ") {  // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
        Qdomains.add(qPattern + "*")
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
            // 테스트 커버리지에서 Q클래스 제외
            excludes = [] + Qdomains

        }

    }
}

jacocoTestReport {
    //레포트 파일 생성
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled true
    }
    // jacocoReport 에서 q 클래스는 제외
    def Qdomains = []
    for(qPattern in "**/QA" .. "**/QZ"){
        Qdomains.add(qPattern+"*")
    }

    afterEvaluate {

        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [] + Qdomains)
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}
